## v0.4
#
# Detect OS
#
OSFLAG :=
OSARCH :=
OSID :=
ifeq ($(OS),Windows_NT)
	OSFLAG = WIN32
	UNAME_P = $(shell powershell -ExecutionPolicy ByPass "(Get-WmiObject Win32_OperatingSystem).OSArchitecture")
	ifeq ($(UNAME_P),64-bit)
		OSARCH = AMD64
	else
		ifeq ($(UNAME_P),32-bit)
			OSARCH = IA32
		else
			OSARCH = ARM
		endif
	endif
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S),Linux)
		OSFLAG = LINUX
		OSID = $(shell cat /etc/*-release | egrep "^ID=" | cut -f2 -d=)
	endif
	ifeq ($(UNAME_S),Darwin)
		OSFLAG = OSX
	endif
		UNAME_P := $(shell uname -p)
	ifeq ($(UNAME_P),x86_64)
		OSARCH = AMD64
	endif
		ifneq ($(filter %86,$(UNAME_P)),)
			OSARCH = IA32
		endif
	ifneq ($(filter arm%,$(UNAME_P)),)
		OSARCH = ARM
	endif
endif

#
# Detect Shell
#
SHELL_IS := 
ifeq ($(SHELL),/bin/bash)
    SHELL_IS = bash
else ifeq ($(SHELL),/usr/bin/bash)
    SHELL_IS = bash
else ifeq ($(SHELL),/bin/sh)
	SHELL_IS = bash
# TODO: The following ifeq should dissapear
else ifeq ($(SHELL),C:/Program Files/Git/usr/bin/sh.exe)
	SHELL_IS = bash
else
    SHELL_IS = powershell
endif

#
# Help Directive
#
.PHONY: help
help:
ifeq ($(SHELL_IS),bash)
	@for f in $(MAKEFILE_LIST); do  grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $$f | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'; done
else
	@$(POWERSHELL) -Command "'$(MAKEFILE_LIST)'.Split() | ForEach { if ($$_) { Select-String -Path $$_ -Pattern '^[a-zA-Z_-]+:.*?## .*$$' | Foreach-Object { $$tag = $$_.Matches[0].Value.split(':')[0]; $$explain = $$_.Matches[0].Value.split('#')[2]; Write-Host $$tag.PadRight(30, ' ') -ForegroundColor Cyan -NoNewline; Write-Host $$explain; } } }"
endif
.DEFAULT_GOAL := help

#
# Binaries
#

POWERSHELL=powershell -ExecutionPolicy ByPass

#
# ENV
#

NOT_IMPLEMENTED_LINUX = "Not implemented under Linux"
NOT_IMPLEMENTED_OSX = "Not implemented under OSX"
NOT_IMPLEMENTED_WINDOWS = "Not implemented under Windows"

#
# Actual Action Definitions
#

APTGET = sudo apt-get

#
# Possible Required Hooks
#

rootcheck:
	@echo "Need root to run." && [ "$$(whoami)" = "root" ]

norootcheck:
	@echo "Don't need root to run." && [ "$$(whoami)" != "root" ]